#lang sicp

(define (distinct? items)
  (cond ((null? items) #t)
        ((null? (cdr items)) #t)
        ((member (car items) (cdr items)) #f)
        (else (distinct? (cdr items)))))

(define (require condition)
  (if (not condition)
    (amb)))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require (not (eq? baker 5)))
    (require (not (eq? cooper 1)))
    (require (not (or (eq? fletcher 1)
                      (eq? fletcher 5))))
    (require (> miller cooper))
    (require (not (or (eq? smith (+ fletcher 1))
                      (eq? smith (- fletcher 1)))))
    (require (not (or (eq? cooper (+ fletcher 1))
                      (eq? cooper (- fletcher 1)))))
    (require (distinct? (list baker cooper fletcher miller smith)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))

(multiple-dwelling)
